from enum import Enum
from random import choice, randint
from typing import Dict, List

from controllers.data_controller import CLASS_SETS, ROOMS, STUDENTS, TEACHERS
from classes.room import Room
from classes.student import Student
from classes.teacher import Teacher
from classes.timetable import Timetable

# * Notes:
# * The genes will be the lessons
# * A chromosome is a complete set of genes
# * Genes will be generated by generating all random "chromosomes" (factors) of a lesson
# * A genome is the same as a lesson


class Subjects(Enum):
    MATHS = "Maths"
    FURTHER_MATHS = "FurtherMaths"
    COMPUTER_SCIENCE = "ComputerScience"
    BIOLOGY = "Biology"
    CHEMISTRY = "Chemistry"
    PHYSICS = "Physics"
    IT = "IT"


class Individual:
    def __init__(self, timetable: Timetable) -> None:
        self.timetable_chromosome = timetable
        self.fitness = self.calc_fitness()

    def generate_mutation(self):
        pass

    def create_genome(self):
        pass

    def crossover(self, otherTimetable: Timetable) -> List[Timetable]:
        pass

    def calc_fitness(self):
        pass


class GeneticAlgorithm:
    def __init__(self, timetable: Dict[str, List[str | int]]) -> None:
        self.timetable = timetable
