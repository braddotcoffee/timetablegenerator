from enum import Enum
from random import choice, randint
from typing import Dict, List

from controllers.data_controller import CLASS_SETS, ROOMS, STUDENTS, TEACHERS
from classes.room import Room
from classes.teacher import Teacher
from classes.timetable import DAYS_TO_TIMETABLE_INDEX, Timetable

# * Notes:
# * The genes will be the lessons
# * A chromosome is a complete set of genes
# * Genes will be generated by generating all random "chromosomes" (factors) of a lesson
# * A genome is the same as a lesson


class Subjects(Enum):
    MATHS = "Maths"
    FURTHER_MATHS = "FurtherMaths"
    COMPUTER_SCIENCE = "ComputerScience"
    BIOLOGY = "Biology"
    CHEMISTRY = "Chemistry"
    PHYSICS = "Physics"
    IT = "IT"


class Individual:
    """This is a whole working timetable of all the teachers"""

    def __init__(self, timetable: Timetable) -> None:
        self.timetable_genome = timetable
        self.fitness = self.calc_fitness()

    def generate_mutation(self):
        mutation_choice = choice(["ClassSet", "Room"])
        mutation_day = choice(["Mon", "Tue", "Wed", "Thu"])
        mutation_period = choice([1, 2, 3, 4, 5, 6])
        if mutation_choice == "ClassSet":
            random_set = choice(CLASS_SETS["SetName"])
            while (
                self.timetable_genome.get_class_set(mutation_day, mutation_period)
                != random_set
            ):
                self.timetable_genome.set_class_set(
                    random_set, mutation_day, mutation_period
                )
                random_set = choice(CLASS_SETS["SetName"])
        else:
            random_room = choice(ROOMS["RoomName"])
            while (
                self.timetable_genome.get_room(mutation_day, mutation_period)
                != random_room
            ):
                self.timetable_genome.set_room(
                    random_room, mutation_day, mutation_period
                )
                random_room = choice(ROOMS["RoomName"])

    def create_genome(self) -> Timetable:
        """This function creates the randomly generated timetable, gl with this"""
        # TODO: THIS
        # * Technically I can make it as broken as I want, because
        # * it will fix itself with the fitness checks.
        # * So I just need to make timetables for all the teachers.
        # * They need to ensure that every class set has a lesson 5x
        # * a week.
        # * Apart from that I'm pretty sure the fitness checks will
        # * sort out the rest of it (I hope)

    def crossover(self, otherTimetable: Timetable) -> List[Timetable]:
        pass

    def calc_fitness(self):
        pass


class GeneticAlgorithm:
    def __init__(self, timetable: Dict[str, List[str | int]]) -> None:
        self.timetable = timetable
